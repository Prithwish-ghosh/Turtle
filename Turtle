turte = read.csv("Satellite Tracking of Oceanic Loggerhead Turtles in the Mediterranean.csv")
head(turte)
dim(turte)
library(circular)
library(CircStats)

watson.test(turte$location.long, alpha = 0.01, dist = "vonmises")
watson.test(turte$location.lat, alpha = 0.01, dist = "vonmises")
library(ggplot2)
options(rgl.useNULL = TRUE)
library(Directional)
library(movMF)

dd = cbind(turte$location.lat, turte$location.long)


Evmf <- function(K){
  movMF(dd, k= K, control = list(nruns = 20))
}

set.seed(123)
Esd = lapply(1:10, Evmf)
Esd
sapply(Esd, BIC)

library(ggOceanMaps)

dt <- data.frame(lon = turte$location.long,
                 lat = turte$location.lat)

plot <- 
  basemap(data = dt, bathymetry = T, land.col = "green4") + 
  geom_point(data = transform_coord(dt), aes(x = lon, y = lat), 
             color = "red", fill = NA, size = 0.5)
plot

vmf_density_grid = function(u, ngrid = 100){
  u[,1] <- u[,1] + 90
  u[,2] <- u[,2] +180
  res <- vmf.kerncontour(u, thumb = "none", den.ret = T, full = T,
                         ngrid = ngrid)
  ret <- expand.grid(Lat = res$lat - 90, Long = res$long - 180)
  ret$Density <- c(res$den)
  ret
}

turtle.dens = vmf_density_grid(dd, ngrid = 300)

basemap(data = dt, bathymetry = T, land.col = "green4") +
  geom_point(data = turte,
             mapping = aes(x = location.long, y = location.lat),
             color = "red", alpha = 1, size = 1 , stroke = 0.1) +
  geom_density_2d(data = turte,
                  aes(x = location.long, y = location.lat),
                  color = "yellow", alpha = 2, size = 1) +
  geom_contour(data = turtle.dens, aes(x = Long, y = Lat, z = Density),
               color = "pink2", size = 1) +   theme(legend.position = "bottom")
#  coord_map("mercator")

# Assuming your dataset is named 'turtle_data' and it has a column named 'date'
sorted_turtle_data <- turte[order(turte$timestamp), ]
head(sorted_turtle_data)
tail(sorted_turtle_data)  

get_initial_bearing <- function(longA, latA, longB, latB) {
  delta_long <- longB - longA
  rad_latA <- latA * (pi / 180)  
  rad_latB <- latB * (pi / 180)  
  
  bearing <- atan2(sin(delta_long) * cos(rad_latB), cos(rad_latA) * sin(rad_latB) - sin(rad_latA) * cos(rad_latB) * cos(delta_long))
  bearing_degrees <- bearing * (180 / pi)  
  
  return(bearing_degrees)
}

dim(turte)

for ( i in 1:10271) {
  sorted_turtle_data$theta[i] = 
    get_initial_bearing(sorted_turtle_data$location.long[i] ,
                        sorted_turtle_data$location.lat[i],
                        sorted_turtle_data$location.long[i+1],
                        sorted_turtle_data$location.lat[i+1] )
}

head(sorted_turtle_data)
watson.test(sorted_turtle_data$theta, alpha = 0.01, dist = "vonmises")


library(ggplot2)
library(ggforce)

sampled_turtle = sorted_turtle_data[c(1:10, 100:110, 200:210, 300, 500:515, 1500, 2000, 
                                      2500, 3000, 4500, 6000, 7000, 8000, 8500),]

basemap(data = dt, bathymetry = TRUE, grid.col = "transparent", land.col = "green4") +
  geom_segment(data = sorted_turtle_data,
               aes(x = sorted_turtle_data$location.long,
                   y = sorted_turtle_data$location.lat,
                   xend = location.long + sin(theta * pi/180),
                   yend = location.lat + cos(theta * pi/180)),
               arrow = arrow(length = unit(0.1, "cm"), type = "closed", ends = "last"),
               color = "red", size = 0)  +
  geom_point(data = sampled_turtle, aes(x = location.long, y = location.lat), size = 5, 
             color = "yellow", shape = 18) + # Add this line
  geom_path(data = sampled_turtle,
            aes(x = location.long, y = location.lat, xend = location.long + 
                  sin(theta * pi/180),
                yend = location.lat + cos(theta * pi/180),
                color = "blue"),
            arrow = arrow(length = unit(0.5, "cm"), type = "closed", ends = "last"),
            size = 1 , col= "blue") +
  theme(legend.position = "bottom")

library(wmm)

dim(sorted_turtle_data)
sorted_turtle_data$h = 0

sorted_turtle_data$timestamp <- as.Date(sorted_turtle_data$timestamp)

sorted_turtle_data$year = format(sorted_turtle_data$timestamp, "%Y")
sorted_turtle_data$year = as.numeric(sorted_turtle_data$year)

# Convert the date string to a POSIXlt object
date_obj <- as.POSIXlt(sorted_turtle_data$timestamp)

# Extract the day of the year
sorted_turtle_data$yearly_day <- date_obj$yday + 1


sorted_turtle_data$yearly_date = sorted_turtle_data$yearly_day/365
sorted_turtle_data$year = as.numeric(sorted_turtle_data$year)
sorted_turtle_data$Annualized_time = (sorted_turtle_data$year + sorted_turtle_data$yearly_date)

sorted_turtle_data$Annualized_time

mag = list()
for (i in 1:10271) {
  mag[[i]] = data.frame(GetMagneticFieldWMM(lon = sorted_turtle_data$location.long[i], 
                                            lat =  sorted_turtle_data$location.lat[i], 
                                            height =  sorted_turtle_data$h[i], 
                                            time =  sorted_turtle_data$Annualized_time[i], 
                                            wmmVersion = "WMM2015"))
}

mage_data = data.frame(t(sapply(mag,c)))
head(mage_data)
magnetic_dta = mage_data[,c(1:3, 7:10)]
head(magnetic_dta)

combined_final_turtle_data = cbind(sorted_turtle_data, magnetic_dta)
tail(combined_final_turtle_data)

library(suncalc)

data = data.frame(date = combined_final_turtle_data$timestamp
                  , lat = combined_final_turtle_data$location.lat ,
                  lon = combined_final_turtle_data$location.long)
s = suncalc::getMoonPosition(data = data, keep = c("azimuth"))
combined_final_turtle_data$moon_pos = s$azimuth

library(solarPos)

combined_final_turtle_data$month <- format(combined_final_turtle_data$timestamp, "%m")
combined_final_turtle_data$day <- format(combined_final_turtle_data$timestamp, "%d")

combined_final_turtle_data$year = as.numeric(combined_final_turtle_data$year)
combined_final_turtle_data$month = as.numeric(combined_final_turtle_data$month)
combined_final_turtle_data$day = as.numeric(combined_final_turtle_data$day)


combined_final_turtle_data$jd = solarPos::julianDay(
  combined_final_turtle_data$year, combined_final_turtle_data$month, 
  combined_final_turtle_data$day
)

x = solarPos::solarPosition(combined_final_turtle_data$jd,
                            combined_final_turtle_data$location.long,
                            combined_final_turtle_data$location.lat
)
head(x)
x = data.frame(x)

combined_final_turtle_data$solar_azimuth = x$azimuth
combined_final_turtle_data$solar_zenith = x$zenith

dim(combined_final_turtle_data)

for ( i in 1:10271) {
  combined_final_turtle_data$del_solar_azimuth[i] = 
    (combined_final_turtle_data$solar_azimuth[i+1] -  
       combined_final_turtle_data$solar_azimuth[i])
}

for ( i in 1:10271) {
  combined_final_turtle_data$del_solar_zenith[i] = 
    (combined_final_turtle_data$solar_zenith[i+1] -  
       combined_final_turtle_data$solar_zenith[i])
}

for ( i in 1:10271) {
  combined_final_turtle_data$del_lunar_azimuth[i] = 
    (combined_final_turtle_data$moon_pos[i+1] -  
       combined_final_turtle_data$moon_pos[i])
}

combined_final_turtle_data$i = as.numeric(combined_final_turtle_data$i)
combined_final_turtle_data$d = as.numeric(combined_final_turtle_data$d)

for ( i in 1:10271) {
  combined_final_turtle_data$del_i[i] = 
    (combined_final_turtle_data$i[i+1] -  
       combined_final_turtle_data$i[i])
}

for ( i in 1:10271) {
  combined_final_turtle_data$del_d[i] = 
    (combined_final_turtle_data$d[i+1] -  
       combined_final_turtle_data$d[i])
}

head(combined_final_turtle_data)
dim(combined_final_turtle_data)
tail(combined_final_turtle_data)


turtle3 = combined_final_turtle_data[1:1300,]
turtle4 = combined_final_turtle_data[1301:2600,]
turtle5 = combined_final_turtle_data[2601:3350,]
turtle6 = combined_final_turtle_data[3450:4100,]
turtle7 = combined_final_turtle_data[4101:4970,]
turtle8 = combined_final_turtle_data[4971:5000,]


turtle12 = combined_final_turtle_data[7030:7500,]
turtle11 = combined_final_turtle_data[7500:8200,]



turtle10 = combined_final_turtle_data[8650:8700,]
turtle9 = combined_final_turtle_data[8700:8900,]
turtle2 = combined_final_turtle_data[8900:9100,]
turtle1 = combined_final_turtle_data[9100:10270,]






watson.test(turtle13$theta, alpha = 0.01, dist = "vonmises")

