dataset = read.csv("Satellite Tracking of Oceanic Loggerhead Turtles in the Mediterranean.csv")
head(dataset)
turtle = dataset[,c(3:5)]
head(turtle)
dim(turtle)
library(ggplot2)
library(Directional)
library(circular)
library(CircStats)
require(sf)
require(tidyverse)
require(lubridate)
require(oce)
require(gganimate)
require(RColorBrewer)
require(rerddap)

library(circular)
library(Directional)
library(CircStats)
library(ggplot2)
library(solarPos)
library(maps)
library(ggOceanMaps)
library(maps)
world_coordinates = map_data("world")
northern_map <- subset(world_coordinates, long >-20)
northern_map1 <- subset(northern_map , long <20)
northern_map2 <- subset(northern_map1 , lat >= 0)
northern_map7 <- subset(northern_map2 , lat <= 70)

library(movMF)

vmf_density_grid = 
  function(u, ngrid = 100) {
    # Translate to (0,180) and (0,360)
    u[,1] <- u[,1] + 90
    u[,2] <- u[,2] + 180
    res <- vmf.kerncontour(u, thumb = "none", den.ret = T, full = T,
                           ngrid = ngrid)
    
    # Translate back to (-90, 90) and (-180, 180) and create a grid of
    # coordinates
    ret <- expand.grid(Lat = res$lat - 90, Long = res$long - 180)
    ret$Density <- c(res$den)
    ret
  }

kocchop = cbind(turtle$location.lat , turtle$location.long)
set.seed(2022)
EvMFs <- 
  function(K){
    movMF(kocchop, k = K, control= list(nruns = 20))
  }

Esd = lapply(1:10, EvMFs)
gt = sapply(Esd, BIC)
gt
Esd

turtle.densities <- vmf_density_grid(kocchop, ngrid = 300)

kocchop1 <- kocchop[sample(nrow(kocchop), 100), ]
dim(kocchop1)

turtle.densities_1 <- vmf_density_grid(kocchop1, ngrid = 300)

world <- map_data("world")

kocchop.plots <- ggplot() +
  geom_map(data = world, map = world,
           mapping = aes(map_id = region),
           color = "grey90", fill = "green4") +
  geom_point(data = turtle,
             mapping = aes(x = location.long, y = location.lat),
             color = "red", alpha = .5, size = .5, stroke = 0.1) +
  geom_contour(data = turtle.densities_1, aes(x=Long, y=Lat, z=Density),
               color = "blue") +
  coord_map("mercator")

kocchop.plots

kocchop.plot <- ggplot() +
  geom_map(data = world, map = world,
           mapping = aes(map_id = region),
           color = "grey90", fill = "green4") +
  geom_point(data = turtle,
             mapping = aes(x = location.long, y = location.lat),
             color = "red", alpha = .5, size = .5, stroke = 0.1) +
  geom_contour(data = turtle.densities, aes(x=Long, y=Lat, z=Density),
               color = "blue") +
  coord_map("mercator")

kocchop.plot

turtle$timestamp <- as.Date(turtle$timestamp)

turtle$year = format(turtle$timestamp, "%Y")
turtle$year = as.numeric(turtle$year)

# Convert the date string to a POSIXlt object
date_obj <- as.POSIXlt(turtle$timestamp)

# Extract the day of the year
turtle$yearly_day <- date_obj$yday + 1


turtle$yearly_date = turtle$yearly_day/365
turtle$year = as.numeric(turtle$year)
turtle$Annualized_time = (turtle$year + turtle$yearly_date)

turtle$Annualized_time
turtle$height = 0
library(wmm)

head(turtle)
summary(turtle)
dim(turtle)

?GetMagneticFieldWMM
mag = list()
for (i in 1:10271) {
  mag[[i]] = data.frame(GetMagneticFieldWMM(lon = turtle$location.long[i], 
                                            lat =  turtle$location.lat[i], 
                                            height =  turtle$height[i], 
                                            time =  turtle$Annualized_time[i], 
                                            wmmVersion = "WMM2015"))
}

mage_data = data.frame(t(sapply(mag,c)))
head(mage_data)
magnetic_dta = mage_data[,c(1:3, 7:10)]
head(magnetic_dta)

combined_turtle_data = cbind(turtle, magnetic_dta)
tail(combined_turtle_data)
library(solarPos)

combined_turtle_data$month <- format(combined_turtle_data$timestamp, "%m")
combined_turtle_data$day <- format(combined_turtle_data$timestamp, "%d")

combined_turtle_data$year = as.numeric(combined_turtle_data$year)
combined_turtle_data$month = as.numeric(combined_turtle_data$month)
combined_turtle_data$day = as.numeric(combined_turtle_data$day)


combined_turtle_data$jd = solarPos::julianDay(
  combined_turtle_data$year, combined_turtle_data$month, 
  combined_turtle_data$day
)

x = solarPos::solarPosition(combined_turtle_data$jd,
                            combined_turtle_data$location.long,
                            combined_turtle_data$location.lat
)
head(x)
x = data.frame(x)

combined_turtle_data$solar_azimuth = x$azimuth
combined_turtle_data$solar_zenith = x$zenith

dim(combined_turtle_data)
head(combined_turtle_data)

for ( i in 1:10271) {
  combined_turtle_data$del_solar_azimuth[i] = 
    (combined_turtle_data$solar_azimuth[i+1] -  
       combined_turtle_data$solar_azimuth[i])
}

for ( i in 1:10271) {
  combined_turtle_data$del_solar_zenith[i] = 
    (combined_turtle_data$solar_zenith[i+1] -  
       combined_turtle_data$solar_zenith[i])
}

tail(combined_turtle_data)

library(suncalc)
data = data.frame(date = combined_turtle_data$timestamp
                  , lat = combined_turtle_data$location.lat ,
                  lon = combined_turtle_data$location.long)
s = suncalc::getMoonPosition(data = data, keep = c("azimuth"))

combined_turtle_data$moon_pos = s$azimuth

for ( i in 1:10271) {
  combined_turtle_data$del_lunar_azimuth[i] = 
    (combined_turtle_data$moon_pos[i+1] -  
       combined_turtle_data$moon_pos[i])
}

head(combined_turtle_data)
tail(combined_turtle_data)


get_initial_bearing <- function(longA, latA, longB, latB) {
  delta_long <- longB - longA
  rad_latA <- latA * (pi / 180)  
  rad_latB <- latB * (pi / 180)  
  
  bearing <- atan2(sin(delta_long) * cos(rad_latB), cos(rad_latA) * sin(rad_latB) - sin(rad_latA) * cos(rad_latB) * cos(delta_long))
  bearing_degrees <- bearing * (180 / pi)  
  
  return(bearing_degrees)
}

for ( i in 1:10271) {
  combined_turtle_data$theta[i] = 
    get_initial_bearing(combined_turtle_data$location.long[i] ,
                        combined_turtle_data$location.lat[i],
                        combined_turtle_data$location.long[i+1],
                        combined_turtle_data$location.lat[i+1] )
}

head(combined_turtle_data)
tail(combined_turtle_data)

combined_turtle_data$i = as.numeric(combined_turtle_data$i)
combined_turtle_data$d = as.numeric(combined_turtle_data$d)

for ( i in 1:10271) {
  combined_turtle_data$del_i[i] = 
    (combined_turtle_data$i[i+1] -  
       combined_turtle_data$i[i])
}

for ( i in 1:10271) {
  combined_turtle_data$del_d[i] = 
    (combined_turtle_data$d[i+1] -  
       combined_turtle_data$d[i])
}

head(combined_turtle_data)
tail(combined_turtle_data)

fit1 = lm.circular(combined_turtle_data$theta, combined_turtle_data$del_lunar_azimuth, type = "c-c")
fit2 = lm.circular(combined_turtle_data$theta, combined_turtle_data$del_d, type = "c-c")
fit3 = lm.circular(combined_turtle_data$theta, combined_turtle_data$del_i, type = "c-c")
fit4 = lm.circular(combined_turtle_data$theta, combined_turtle_data$del_solar_azimuth, type = "c-c")
fit5 = lm.circular(combined_turtle_data$theta, combined_turtle_data$del_solar_zenith, type = "c-c")

fit1$rho
fit2$rho
fit3$rho
fit4$rho
fit5$rho

watson.test(combined_turtle_data$location.long, alpha = 0.01, dist = "vonmises")
watson.test(combined_turtle_data$location.lat, alpha = 0.01, dist = "vonmises")
watson.test(combined_turtle_data$del_solar_azimuth, alpha = 0.01, dist = "vonmises")
watson.test(combined_turtle_data$del_solar_zenith, alpha = 0.01, dist = "vonmises")
watson.test(combined_turtle_data$del_lunar_azimuth, alpha = 0.01, dist = "vonmises")
watson.test(combined_turtle_data$theta, alpha = 0.01, dist = "vonmises")
watson.test(combined_turtle_data$del_i, alpha = 0.01, dist = "vonmises")
watson.test(combined_turtle_data$del_d, alpha = 0.01, dist = "vonmises")

head(combined_turtle_data)
dim(combined_turtle_data)
tut = combined_turtle_data[,c(21,22,24,26,27)]

tut = na.omit(tut)

library(FactoMineR)
pca_result <- PCA(tut, graph = TRUE)

pca_result$var$contrib
pca_result$eig

Dim1 = 0.2170757957*combined_turtle_data$del_solar_azimuth + 
  0.3784609982*combined_turtle_data$del_solar_zenith + 
  0.003482306 * combined_turtle_data$del_lunar_azimuth +
  0.2541961067 * combined_turtle_data$del_i + 0.1499188688 * combined_turtle_data$del_d

fit_dim1 = lm.circular(combined_turtle_data$theta, Dim1)  
fit_dim1$rho  

Dim2 = 0.38669821*combined_turtle_data$del_solar_azimuth + 
  0.3269010*combined_turtle_data$del_solar_zenith + 
  0.6297712 * combined_turtle_data$del_lunar_azimuth +
  0.7595313  * combined_turtle_data$del_i + 0.44168144 * combined_turtle_data$del_d
fit_dim2 = lm.circular(combined_turtle_data$theta, Dim2)  
fit_dim2$rho  

num_partitions <- 20
combined_turtle_data = na.omit(combined_turtle_data)
dim(combined_turtle_data)
head(combined_turtle_data)
# Create grid partitions based on longitude and latitude
combined_turtle_data$longitude_partition <- cut(combined_turtle_data$location.long, breaks = num_partitions)
combined_turtle_data$latitude_partition <- cut(combined_turtle_data$location.lat, breaks = num_partitions)

# Group by grid partitions and calculate mean of parameters
grid_mean_data <- combined_turtle_data %>%
  group_by(longitude_partition, latitude_partition) %>%
  summarise(
    mean_longitude = circ.mean(location.long),
    mean_latitude = circ.mean(location.lat),
    mean_direction = circ.mean(theta),
    mean_del_i = circ.mean(del_i),
    mean_del_d = circ.mean(del_d),
    mean_del_lunar_azimuth = circ.mean(del_lunar_azimuth),
    mean_del_solar_zenith = circ.mean(del_solar_zenith),
    mean_del_solar_azimuth = circ.mean(del_solar_azimuth)
  )

# Print the new dataset with mean values for each grid
print(grid_mean_data)
grid_mean_data_turtle = data.frame(grid_mean_data)

head(grid_mean_data_turtle)

dir_1 = lm.circular(grid_mean_data_turtle$mean_direction, grid_mean_data_turtle$mean_del_i)
dir_1$rho
dir_2 = lm.circular(grid_mean_data_turtle$mean_direction, grid_mean_data_turtle$mean_del_d)
dir_2$rho
dir_3 = lm.circular(grid_mean_data_turtle$mean_direction, grid_mean_data_turtle$mean_del_lunar_azimuth)
dir_3$rho
dir_4 = lm.circular(grid_mean_data_turtle$mean_direction, grid_mean_data_turtle$mean_del_solar_zenith)
dir_4$rho
dir_5 = lm.circular(grid_mean_data_turtle$mean_direction, grid_mean_data_turtle$mean_del_solar_azimuth)
dir_5$rho
